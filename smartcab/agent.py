import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=True, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.stateInd = 0            # Index of the current state in the Q-Table
        self.statesDict = {}         # Dictionary of possible states
        self.trialNumber = 0

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
         
        # Update epsilon using a decay function of your choice
        self.epsilon = self.epsilon - 0.05
        # self.epsilon = 0.99**self.trialNumber
       
        # Update additional class parameters as needed
        self.trialNumber += 1
        
        # If 'testing' is True, set epsilon and alpha to 0
        if (testing == True):
            self.epsilon = 0
            self.alpha = 0

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline
        
        ########### 
        ## TO DO ##
        ###########
        
        # NOTE : you are not allowed to engineer eatures outside of the inputs available.
        # Because the aim of this project is to teach Reinforcement Learning, we have placed 
        # constraints in order for you to learn how to adjust epsilon and alpha, and thus learn about the balance between exploration and exploitation.
        # With the hand-engineered features, this learning process gets entirely negated.
        
        # Set 'state' as a tuple of relevant data for the agent        
        state = (waypoint, inputs['light'], inputs['oncoming'], inputs['left'], inputs['right'])
        state = (waypoint, inputs['light'], inputs['oncoming'], inputs['left'])

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        maxQ = max(self.Q[self.stateInd].values())

        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
               # If it is not, create a new dictionary for that state
               #   Then, for each action available, set the initial Q-value to 0.0 
        if (self.learning == True):
            i = -1  # initializing as -1 as the first index on the Q-Table will be (i+1) so it will be 0.
            for i in range (0,len(self.Q.keys())):
                if (state[0] == self.statesDict[i]['Waypoint'] and state[1] == self.statesDict[i]['Light'] and state[2] == self.statesDict[i]['Oncoming'] and state[3] == self.statesDict[i]['Left'] ): # and state[4] == self.statesDict[i]['Right']): # Checking if state already exist
                    self.stateInd = i   # updating the index of the current state in the Q-Table
                    return
            self.statesDict[i + 1]  = {"Waypoint": state[0], "Light": state[1], "Oncoming": state[2], "Left": state[3]}#, "Right": state[4]}                  # New entry on states dictionary
            self.Q[i+1] = {self.valid_actions[0]: 0.0, self.valid_actions[1]: 0.0, self.valid_actions[2]: 0.0, self.valid_actions[3]: 0.0}      # New entry on Q-Values dictionary
            self.stateInd = i+1
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None

        ########### 
        ###########
        
        # When not learning, choose a random action
        if (self.learning == False):
            action = random.choice(self.valid_actions)
        # When learning, choose a random action with 'epsilon' probability
        else: 
            if (random.random() < self.epsilon):  # randomly chooses number between 0 and 1. If number < epsilon, do a random action.
                action = random.choice(self.valid_actions)
        # Otherwise, choose an action with the highest Q-value for the current state
        # Be sure that when choosing an action with highest Q-value that you randomly select between actions that "tie".
            else:
                bestActions = []                            # best actions to be random selected. If there is only 1 best action, will always be the selected.
                maxQ = self.get_maxQ(state)                 # Get maxQ
                
                for k in self.Q[self.stateInd].keys():                  # Iterating through each action in the state of the Q-Table.
                    if ( self.Q[self.stateInd][k] == maxQ):             # If there is an action with the same highest  Q-value, add this action to the bestActions list.
                        bestActions.append(k)
                        
                action = random.choice(bestActions)  
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives a reward. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        
        
        if (self.learning == True):
            curStateInd = self.stateInd  # Getting value now as it will be update when creating the next_state in the Q-Table
        
            # print "getting next state info"
            # next_state = self.build_state()         # Get next state
            # self.createQ(next_state)                # Create, if doesn't already exists, the 'next_state' in Q-table
        
            # Q(s,a) = (1-self.alpha)*Q(s,a) + self.alpha* (reward + Gamma * max( Q(s', a') ) )
            self.Q[curStateInd][action] = (1-self.alpha) * self.Q[curStateInd][action] + self.alpha * ( reward )#+ gamma * self.get_maxQ(next_state) )


        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, epsilon = 1, alpha = 0.1)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay = 0.01, display = False, log_metrics = False, optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(tolerance = 0.001, n_test = 100)


if __name__ == '__main__':
    run()
